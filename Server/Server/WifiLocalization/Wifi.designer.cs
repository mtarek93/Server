#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Server.WifiLocalization
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class WifiDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertOfflineTable(OfflineTable instance);
    partial void UpdateOfflineTable(OfflineTable instance);
    partial void DeleteOfflineTable(OfflineTable instance);
    #endregion
		
		public WifiDataContext() : 
				base(global::Server.Properties.Settings.Default.DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WifiDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WifiDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WifiDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WifiDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<OfflineTable> OfflineTables
		{
			get
			{
				return this.GetTable<OfflineTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OfflineTable")]
	public partial class OfflineTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MAC;
		
		private int _Room;
		
		private int _Sector;
		
		private int _LocationNumber;
		
		private int _ApNumber;
		
		private int _MapNumber;
		
		private float _X;
		
		private float _Y;
		
		private float _RSSI;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMACChanging(string value);
    partial void OnMACChanged();
    partial void OnRoomChanging(int value);
    partial void OnRoomChanged();
    partial void OnSectorChanging(int value);
    partial void OnSectorChanged();
    partial void OnLocationNumberChanging(int value);
    partial void OnLocationNumberChanged();
    partial void OnApNumberChanging(int value);
    partial void OnApNumberChanged();
    partial void OnMapNumberChanging(int value);
    partial void OnMapNumberChanged();
    partial void OnXChanging(float value);
    partial void OnXChanged();
    partial void OnYChanging(float value);
    partial void OnYChanged();
    partial void OnRSSIChanging(float value);
    partial void OnRSSIChanged();
    #endregion
		
		public OfflineTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAC", DbType="NChar(22) NOT NULL", CanBeNull=false)]
		public string MAC
		{
			get
			{
				return this._MAC;
			}
			set
			{
				if ((this._MAC != value))
				{
					this.OnMACChanging(value);
					this.SendPropertyChanging();
					this._MAC = value;
					this.SendPropertyChanged("MAC");
					this.OnMACChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Room", DbType="Int NOT NULL")]
		public int Room
		{
			get
			{
				return this._Room;
			}
			set
			{
				if ((this._Room != value))
				{
					this.OnRoomChanging(value);
					this.SendPropertyChanging();
					this._Room = value;
					this.SendPropertyChanged("Room");
					this.OnRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sector", DbType="Int NOT NULL")]
		public int Sector
		{
			get
			{
				return this._Sector;
			}
			set
			{
				if ((this._Sector != value))
				{
					this.OnSectorChanging(value);
					this.SendPropertyChanging();
					this._Sector = value;
					this.SendPropertyChanged("Sector");
					this.OnSectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationNumber", DbType="Int NOT NULL")]
		public int LocationNumber
		{
			get
			{
				return this._LocationNumber;
			}
			set
			{
				if ((this._LocationNumber != value))
				{
					this.OnLocationNumberChanging(value);
					this.SendPropertyChanging();
					this._LocationNumber = value;
					this.SendPropertyChanged("LocationNumber");
					this.OnLocationNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApNumber", DbType="Int NOT NULL")]
		public int ApNumber
		{
			get
			{
				return this._ApNumber;
			}
			set
			{
				if ((this._ApNumber != value))
				{
					this.OnApNumberChanging(value);
					this.SendPropertyChanging();
					this._ApNumber = value;
					this.SendPropertyChanged("ApNumber");
					this.OnApNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapNumber", DbType="Int NOT NULL")]
		public int MapNumber
		{
			get
			{
				return this._MapNumber;
			}
			set
			{
				if ((this._MapNumber != value))
				{
					this.OnMapNumberChanging(value);
					this.SendPropertyChanging();
					this._MapNumber = value;
					this.SendPropertyChanged("MapNumber");
					this.OnMapNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Real NOT NULL")]
		public float X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Real NOT NULL")]
		public float Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSSI", DbType="Real NOT NULL")]
		public float RSSI
		{
			get
			{
				return this._RSSI;
			}
			set
			{
				if ((this._RSSI != value))
				{
					this.OnRSSIChanging(value);
					this.SendPropertyChanging();
					this._RSSI = value;
					this.SendPropertyChanged("RSSI");
					this.OnRSSIChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
